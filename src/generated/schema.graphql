### This file was autogenerated by Nexus 0.11.6
### Do not make changes to this file directly


type AggregatePasswordMeta {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthPayload {
  token: String
  user: User
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPasswordMeta(data: PasswordMetaCreateInput!): PasswordMeta!
  createUser(data: UserCreateInput!): User!
  deleteManyPasswordMetas(where: PasswordMetaWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deletePasswordMeta(where: PasswordMetaWhereUniqueInput!): PasswordMeta
  deleteUser(where: UserWhereUniqueInput!): User
  login(email: String, password: String): AuthPayload
  signup(email: String, firstName: String, lastName: String, password: String, phone: String): AuthPayload
  updateManyPasswordMetas(data: PasswordMetaUpdateManyMutationInput!, where: PasswordMetaWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updatePasswordMeta(data: PasswordMetaUpdateInput!, where: PasswordMetaWhereUniqueInput!): PasswordMeta
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertPasswordMeta(create: PasswordMetaCreateInput!, update: PasswordMetaUpdateInput!, where: PasswordMetaWhereUniqueInput!): PasswordMeta!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PasswordMeta {
  createdAt: DateTime!
  id: ID!
  resetToken: String!
}

type PasswordMetaConnection {
  aggregate: AggregatePasswordMeta!
  edges: [PasswordMetaEdge!]!
  pageInfo: PageInfo!
}

input PasswordMetaCreateInput {
  resetToken: String!
}

input PasswordMetaCreateOneInput {
  connect: PasswordMetaWhereUniqueInput
  create: PasswordMetaCreateInput
}

type PasswordMetaEdge {
  cursor: String!
  node: PasswordMeta!
}

enum PasswordMetaOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  resetToken_ASC
  resetToken_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PasswordMetaUpdateDataInput {
  resetToken: String
}

input PasswordMetaUpdateInput {
  resetToken: String
}

input PasswordMetaUpdateManyMutationInput {
  resetToken: String
}

input PasswordMetaUpdateOneInput {
  connect: PasswordMetaWhereUniqueInput
  create: PasswordMetaCreateInput
  delete: Boolean
  disconnect: Boolean
  update: PasswordMetaUpdateDataInput
  upsert: PasswordMetaUpsertNestedInput
}

input PasswordMetaUpsertNestedInput {
  create: PasswordMetaCreateInput!
  update: PasswordMetaUpdateDataInput!
}

input PasswordMetaWhereInput {
  AND: [PasswordMetaWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [PasswordMetaWhereInput!]
  OR: [PasswordMetaWhereInput!]
  resetToken: String
  resetToken_contains: String
  resetToken_ends_with: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_not: String
  resetToken_not_contains: String
  resetToken_not_ends_with: String
  resetToken_not_in: [String!]
  resetToken_not_starts_with: String
  resetToken_starts_with: String
}

input PasswordMetaWhereUniqueInput {
  id: ID
}

type Query {
  passwordMeta(where: PasswordMetaWhereUniqueInput!): PasswordMeta
  passwordMetas(after: String, before: String, first: Int, last: Int, orderBy: PasswordMetaOrderByInput, skip: Int, where: PasswordMetaWhereInput): [PasswordMeta!]!
  passwordMetasConnection(after: String, before: String, first: Int, last: Int, orderBy: PasswordMetaOrderByInput, skip: Int, where: PasswordMetaWhereInput): PasswordMetaConnection!
  profile: User
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

type TriggerPasswordResetPayload {
  ok: Boolean
}

type User {
  email: String!
  firstName: String
  id: ID!
  lastName: String
  phone: String
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  email: String!
  firstName: String
  lastName: String
  password: String!
  passwordMeta: PasswordMetaCreateOneInput
  phone: String
  role: UserRole
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  id_ASC
  id_DESC
  lastName_ASC
  lastName_DESC
  password_ASC
  password_DESC
  phone_ASC
  phone_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum UserRole {
  ADMIN
  USER
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
  password: String
  passwordMeta: PasswordMetaUpdateOneInput
  phone: String
  role: UserRole
}

input UserUpdateManyMutationInput {
  email: String
  firstName: String
  lastName: String
  password: String
  phone: String
  role: UserRole
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  firstName: String
  firstName_contains: String
  firstName_ends_with: String
  firstName_gt: String
  firstName_gte: String
  firstName_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_not: String
  firstName_not_contains: String
  firstName_not_ends_with: String
  firstName_not_in: [String!]
  firstName_not_starts_with: String
  firstName_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  lastName: String
  lastName_contains: String
  lastName_ends_with: String
  lastName_gt: String
  lastName_gte: String
  lastName_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_not: String
  lastName_not_contains: String
  lastName_not_ends_with: String
  lastName_not_in: [String!]
  lastName_not_starts_with: String
  lastName_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  passwordMeta: PasswordMetaWhereInput
  phone: String
  phone_contains: String
  phone_ends_with: String
  phone_gt: String
  phone_gte: String
  phone_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_not: String
  phone_not_contains: String
  phone_not_ends_with: String
  phone_not_in: [String!]
  phone_not_starts_with: String
  phone_starts_with: String
  role: UserRole
  role_in: [UserRole!]
  role_not: UserRole
  role_not_in: [UserRole!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
